package app

import (
	"fmt"
	"go.uber.org/zap"
	tele "gopkg.in/telebot.v3"
	"hamsterbot/config"
	"hamsterbot/internal/app/endpoint/mutes"
	"hamsterbot/internal/app/endpoint/payments"
	"hamsterbot/internal/app/endpoint/plays"
	"hamsterbot/internal/app/endpoint/users"
	"hamsterbot/internal/app/middleware"
	mutesService "hamsterbot/internal/app/services/mutes"
	paymentsService "hamsterbot/internal/app/services/payments"
	playsService "hamsterbot/internal/app/services/plays"
	usersService "hamsterbot/internal/app/services/users"
	"hamsterbot/pkg/cache"
	"hamsterbot/pkg/db"
	"hamsterbot/pkg/logger"
	"log"
	"time"
)

type App struct {
	users    *usersService.Service
	payments *paymentsService.Service
	mutes    *mutesService.Service
	plays    *playsService.Service
}

func New() (*App, error) {
	cfg, err := config.NewConfig()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–ø–∞—Ä—Å–∏—Ç—å .env —Ñ–∞–π–ª –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É: %v", err)
	}

	logger.Init(cfg.LoggerLevel)

	err = cache.Init(fmt.Sprintf("%s:%s", cfg.Redis.RedisAddr, cfg.Redis.RedisPort), cfg.Redis.RedisUsername, cfg.Redis.RedisPassword, cfg.Redis.RedisDBId)
	if err != nil {
		logger.Error("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞: ", zap.Error(err))
		return nil, err
	}

	err = db.Init(cfg.DB.DBUser, cfg.DB.DBPassword, cfg.DB.DBHost, cfg.DB.DBName)
	if err != nil {
		logger.Fatal("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: ", zap.Error(err))
		return nil, err
	}

	a := &App{}

	InitBot(cfg.TelegramAPI, a)

	return a, nil
}

func InitBot(TelegramAPI string, a *App) {
	pref := tele.Settings{
		Token:  TelegramAPI,
		Poller: &tele.LongPoller{Timeout: 1 * time.Second},
	}

	b, err := tele.NewBot(pref)
	if err != nil {
		logger.Error("–±–æ—Ç")
	}

	a.users = usersService.New()
	a.payments = paymentsService.New(a.users)
	a.mutes = mutesService.New(a.users)
	a.plays = playsService.New(a.users)

	users := users.Endpoint{User: a.users}
	mwUsers := middleware.Endpoint{Bot: b, User: a.users}
	payments := payments.Endpoint{Payment: a.payments}
	mutes := mutes.Endpoint{Mute: a.mutes}
	plays := plays.Endpoint{Play: a.plays}

	b.Use(mwUsers.IsUser)

	b.Handle("/help", func(c tele.Context) error {
		c.Send("üöÄ –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã\n" +
			"/user <username> - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n" +
			"/pay <username> <amount> - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n" +
			"/mute <username> <duration> - –ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–∫–æ–µ-—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ñ–æ—Ä–º–∞—Ç - 5s/11m/23h)\n" +
			"/unmute <username> - –†–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n" +
			"üé∞ –ú–∏–Ω–∏-–∏–≥—Ä—ã\n" +
			"/slots <amount> - –°—ã–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ—Ç x2 –¥–æ x100‚ùóÔ∏è)\n" +
			"/steal <username> <amount> - –£–∫—Ä–∞—Å—Ç—å —Å—É–º–º—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–µ–º –±–æ–ª—å—à–µ —Å—É–º–º–∞, —Ç–µ–º –Ω–∏–∂–µ —à–∞–Ω—Å)")
		return nil
	})

	b.Handle("/user", users.GetUserData)
	b.Handle("/pay", payments.PayHandler)
	b.Handle("/mute", mutes.MuteHandler)
	b.Handle("/unmute", mutes.UnmuteHandler)
	b.Handle("/slots", plays.SlotsHandler)
	b.Handle("/steal", plays.StealHandler)

	b.Handle(tele.OnText, func(c tele.Context) error { return nil })
	b.Handle(tele.OnAudio, func(c tele.Context) error { return nil })
	b.Handle(tele.OnCallback, func(c tele.Context) error { return nil })
	b.Handle(tele.OnDocument, func(c tele.Context) error { return nil })
	b.Handle(tele.OnEdited, func(c tele.Context) error { return nil })
	b.Handle(tele.OnMedia, func(c tele.Context) error { return nil })
	b.Handle(tele.OnPhoto, func(c tele.Context) error { return nil })
	b.Handle(tele.OnSticker, func(c tele.Context) error { return nil })
	b.Handle(tele.OnVideo, func(c tele.Context) error { return nil })
	b.Handle(tele.OnVoice, func(c tele.Context) error { return nil })

	go func() {
		ticker := time.NewTicker(1 * time.Hour)
		defer ticker.Stop()

		// –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
		if err := a.users.IncrementAllUserBalances(); err != nil {
			log.Fatalf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		}

		for {
			select {
			case <-ticker.C:
				err := a.users.IncrementAllUserBalances()
				if err != nil {
					log.Printf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
				} else {
					log.Println("–±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
				}
			}
		}
	}()

	b.Start()
}
