package app

import (
	"fmt"
	"go.uber.org/zap"
	tele "gopkg.in/telebot.v3"
	"hamsterbot/config"
	"hamsterbot/internal/app/endpoint/mutes"
	"hamsterbot/internal/app/endpoint/payments"
	"hamsterbot/internal/app/endpoint/plays"
	"hamsterbot/internal/app/endpoint/users"
	"hamsterbot/internal/app/middleware"
	mutesService "hamsterbot/internal/app/services/mutes"
	paymentsService "hamsterbot/internal/app/services/payments"
	playsService "hamsterbot/internal/app/services/plays"
	usersService "hamsterbot/internal/app/services/users"
	"hamsterbot/pkg/cache"
	"hamsterbot/pkg/db"
	"hamsterbot/pkg/logger"
	"hamsterbot/pkg/metrics"
	"log"
	"strings"
	"time"
)

type App struct {
	users    *usersService.Service
	payments *paymentsService.Service
	mutes    *mutesService.Service
	plays    *playsService.Service
}

func New() (*App, error) {
	cfg, err := config.NewConfig()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–ø–∞—Ä—Å–∏—Ç—å .env —Ñ–∞–π–ª –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É: %v", err)
	}

	logger.Init(cfg.LoggerLevel)

	err = cache.Init(fmt.Sprintf("%s:%s", cfg.Redis.RedisAddr, cfg.Redis.RedisPort), cfg.Redis.RedisUsername, cfg.Redis.RedisPassword, cfg.Redis.RedisDBId)
	if err != nil {
		logger.Fatal("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞: ", zap.Error(err))
		return nil, err
	}

	err = db.Init(cfg.DB.DBUser, cfg.DB.DBPassword, cfg.DB.DBHost, cfg.DB.DBName)
	if err != nil {
		logger.Fatal("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: ", zap.Error(err))
		return nil, err
	}

	go metrics.Init()

	a := &App{}

	InitBot(cfg.TelegramAPI, a)

	return a, nil
}

func InitBot(TelegramAPI string, a *App) {
	botLogger := logger.Named("bot")
	pref := tele.Settings{
		Token:  TelegramAPI,
		Poller: &tele.LongPoller{Timeout: 1 * time.Second},
	}

	b, err := tele.NewBot(pref)
	if err != nil {
		botLogger.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞", zap.Error(err))
	}

	go func() {
		ubLogger := logger.Named("updateBalance")

		ticker := time.NewTicker(1 * time.Hour)
		defer ticker.Stop()

		for {
			select {
			case <-ticker.C:
				if err := a.users.IncrementAllUserBalances(); err != nil {
					ubLogger.Error("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", zap.Error(err))
				} else {
					ubLogger.Info("–±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
				}
			}
		}
	}()

	a.users = usersService.New()
	a.payments = paymentsService.New(a.users)
	a.mutes = mutesService.New(a.users)
	a.plays = playsService.New(a.users, a.mutes)

	mwEndpoint := middleware.Endpoint{Bot: b, User: a.users}
	usersEndpoint := users.Endpoint{User: a.users}
	paymentsEndpoint := payments.Endpoint{Payment: a.payments, User: a.users}
	mutesEndpoint := mutes.Endpoint{Mute: a.mutes}
	playsEndpoint := plays.Endpoint{Play: a.plays}

	b.Use(mwEndpoint.IsUser)

	b.Handle("/help", func(c tele.Context) error {
		err := c.Send("üöÄ –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã\n" +
			"/user <username> - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n" +
			"/pay <username> <amount> - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n" +
			"/mute <username> <duration> - –ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–∫–æ–µ-—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ñ–æ—Ä–º–∞—Ç - 5s/11m/23h)\n" +
			"/unmute <username> - –†–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n" +
			"üé∞ –ú–∏–Ω–∏-–∏–≥—Ä—ã\n" +
			"/slots <amount> - –°—ã–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ—Ç x2 –¥–æ x100 ‚ùó)")
		if err != nil {
			return err
		}
		return nil
	})
	//b.Handle("/rule", playsEndpoint.Rules)

	// user –∫–æ–º–∞–Ω–¥—ã
	b.Handle("/user", usersEndpoint.GetUserData)
	//b.Handle("/top", usersEndpoint.TopHandler)
	//b.Handle("/topb", func(c tele.Context) error {
	//	return usersEndpoint.TopHandlerCommand(c, "balance")
	//})
	//b.Handle("/topl", func(c tele.Context) error {
	//	return usersEndpoint.TopHandlerCommand(c, "lvl")
	//})
	//b.Handle("/topi", func(c tele.Context) error {
	//	return usersEndpoint.TopHandlerCommand(c, "income")
	//})
	b.Handle("/bank", paymentsEndpoint.BankHandler)
	b.Handle("/pay", paymentsEndpoint.PayHandler)
	b.Handle("/mute", mutesEndpoint.MuteHandler)
	b.Handle("/unmute", mutesEndpoint.UnmuteHandler)
	b.Handle("/slots", playsEndpoint.SlotsHandler)
	//b.Handle("/rln", playsEndpoint.RouletteNumHandler)
	//b.Handle("/rlc", playsEndpoint.RouletteColorHandler)
	//b.Handle("/dice", playsEndpoint.DiceHandler)
	//b.Handle("/rsp", playsEndpoint.RockPaperScissorsHandler)
	//b.Handle("/selfmute", playsEndpoint.SelfMuteHandler)
	//b.Handle("/selfunmute", playsEndpoint.SelfUnmuteHandler)
	b.Handle("/steal", playsEndpoint.StealHandler)

	// adm –∫–æ–º–∞–Ω–¥—ã
	b.Handle("/payd", paymentsEndpoint.PayAdmHandler)
	b.Handle("/send", func(c tele.Context) error {
		if c.Sender().ID != 1230045591 {
			return nil
		}

		args := c.Args()

		chatID := int64(-1002138316635)

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ Send —É –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
		_, err := c.Bot().Send(tele.ChatID(chatID), strings.Join(args, " "))
		return err
	})

	// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
	// –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–ª
	// middleware (—É–¥–∞–ª—è–ª —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –º—É—Ç–∞ –∏ –ø—Ä–æ—á–µ–µ)
	b.Handle(tele.OnText, func(c tele.Context) error { return nil })
	b.Handle(tele.OnAudio, func(c tele.Context) error { return nil })
	b.Handle(tele.OnCallback, func(c tele.Context) error { return nil })
	b.Handle(tele.OnDocument, func(c tele.Context) error { return nil })
	b.Handle(tele.OnEdited, func(c tele.Context) error { return nil })
	b.Handle(tele.OnMedia, func(c tele.Context) error { return nil })
	b.Handle(tele.OnPhoto, func(c tele.Context) error { return nil })
	b.Handle(tele.OnSticker, func(c tele.Context) error { return nil })
	b.Handle(tele.OnVideo, func(c tele.Context) error { return nil })
	b.Handle(tele.OnVoice, func(c tele.Context) error { return nil })

	b.Start()
}
