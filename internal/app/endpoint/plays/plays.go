package plays

import (
	"fmt"
	"gopkg.in/telebot.v3"
	"hamsterbot/pkg/logger"
	"strconv"
	"strings"
)

type Play interface {
	Slots(username string, amount int) (bool, []string, int, int, error)
	Steal(to string, from string, amount int) (bool, int, error)
}

type Endpoint struct {
	Play Play
}

func (e *Endpoint) SlotsHandler(c telebot.Context) error {
	logger.Debug("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Slots")
	var oldAmount int

	args := c.Args()

	if len(args) == 1 { // /slots <amount>
		var err error
		oldAmount, err = strconv.Atoi(args[0])
		if err != nil {
			return err
		}
	} else {
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /slots <amount>.")
	}

	if oldAmount < 0 {
		return c.Send("–û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
	}

	win, result, amount, balance, err := e.Play.Slots(c.Sender().Username, oldAmount)
	if err != nil {
		if err.Error() == "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤" {
			return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %s. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %d –∑–µ—Ç–æ–∫.", err.Error(), balance))
		}
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %s.", err.Error()))
	}

	resultMsg := fmt.Sprintf("üé∞ –ò–≥—Ä–∞–µ–º –Ω–∞ %d –∑–µ—Ç–æ–∫\n\n%s | %s | %s\n\n", oldAmount, result[0], result[1], result[2])
	if win {
		resultMsg += fmt.Sprintf("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª: %d –∑–µ—Ç–æ–∫\n", amount)
	} else {
		resultMsg += "üö´ –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.\n"
	}
	resultMsg += fmt.Sprintf("–í–∞—à –±–∞–ª–∞–Ω—Å: %d", balance)

	return c.Send(resultMsg)
}

func (e *Endpoint) StealHandler(c telebot.Context) error {
	logger.Debug("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Steals")
	var username string
	var amount int

	args := c.Args()

	if len(args) == 2 {
		username = args[0]
		amountStr := args[1]

		var err error
		amount, err = strconv.Atoi(amountStr)
		if err != nil {
			return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: /steal username 100")
		}
		// /pay <—Å—É–º–º–∞>
	} else if len(args) == 1 && c.Message().ReplyTo != nil {
		username = c.Message().ReplyTo.Sender.Username

		amountStr := args[0]

		var err error
		amount, err = strconv.Atoi(amountStr)
		if err != nil {
			return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: /steal username 100")
		}
	} else {
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /steal username —Å—É–º–º–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /steal —Å—É–º–º–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
	}

	if amount < 0 {
		return c.Send("–û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
	}

	win, balance, err := e.Play.Steal(c.Sender().Username, username, amount)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %s.", err.Error()))
	}

	resultMsg := fmt.Sprintf("üé∞ –ü–æ–ø—ã—Ç–∫–∞ —É–∫—Ä–∞—Å—Ç—å %d –∑–µ—Ç–æ–∫ —É @%s: ", amount, strings.Trim(username, "@"))
	if win {
		resultMsg += fmt.Sprintf("‚úÖ –£—Å–ø–µ—à–Ω–æ! \n\n –í–∞—à –±–∞–ª–∞–Ω—Å: %d –∑–µ—Ç–æ–∫\n", balance)
	} else {
		resultMsg += fmt.Sprintf("üö´ –ù–µ—É–¥–∞—á–∞( \n\n –í–∞—à –±–∞–ª–∞–Ω—Å: %d –∑–µ—Ç–æ–∫\n", balance)
	}

	return c.Send(resultMsg)
}
