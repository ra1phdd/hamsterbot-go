package plays

import (
	"fmt"
	"go.uber.org/zap"
	"gopkg.in/telebot.v3"
	"hamsterbot/internal/app/constants"
	"hamsterbot/pkg/logger"
	"strconv"
	"strings"
)

type Play interface {
	Slots(id, amount int64) (bool, bool, []string, int64, int64, error)
	RouletteNum(id, number, amount int64) (bool, bool, int64, int64, int64, error)
	RouletteColor(id, color, amount int64) (bool, bool, string, int64, int64, error)
	Dice(id, number, amount int64) (bool, bool, []int64, int64, int64, error)
	RockPaperScissors(id, number, amount int64) (bool, bool, string, int64, int64, error)
	Steal(to string, from string, amount int) (bool, int64, error)
	SelfMute(id int64, durationStr string) (int64, int64, error)
	SelfUnmute(id int64) (int64, int64, error)
}

type Endpoint struct {
	Play Play
}

func (e *Endpoint) Rules(c telebot.Context) error {
	args := c.Args()

	if len(args) == 1 {
		switch args[0] {
		case "slots":
			return c.Send("–í –∏–≥—Ä–µ '–°–ª–æ—Ç—ã' –∏–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç —Å—Ç–∞–≤–∫—É –≤ –∑–µ—Ç–∫–∞—Ö, –∫–æ—Ç–æ—Ä—É—é –æ–Ω —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å. " +
				"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–ø–∞–¥–∞—é—Ç —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞.\n\n\t‚Ä¢\t–ï—Å–ª–∏ 2 –∏–∑ 3 –≤—ã–ø–∞–≤—à–∏—Ö —Å–∏–º–≤–æ–ª–∞ " +
				"—Å–æ–≤–ø–∞–¥–∞—é—Ç, –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç x2 —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏.\n\t‚Ä¢\t–ï—Å–ª–∏ 3 –≤—ã–ø–∞–≤—à–∏—Ö —Å–∏–º–≤–æ–ª–∞ —Å–æ–ø–∞–¥–∞—é—Ç, —Ç–æ" +
				"–∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç x100 –∑–∞ 7Ô∏è‚É£, x20 –∑–∞ üîî –∏ x10 –∑–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏.\n\t‚Ä¢\t–ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π " +
				"–Ω–µ—Ç, —Ç–æ —Å—Ç–∞–≤–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω–æ–π.\n\n–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: /slots 100")
		case "rln":
			return c.Send("–í –∏–≥—Ä–µ '–†—É–ª–µ—Ç–∫–∞ –ø–æ —á–∏—Å–ª—É' –∏–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 36 –∏ —Å—Ç–∞–≤–∫—É –≤ –∑–µ—Ç–∫–∞—Ö.\n\n\t‚Ä¢\t" +
				"–ï—Å–ª–∏ –≤—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —á–∏—Å–ª–æ–º, –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç x35 —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏. " +
				"–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, —Å—Ç–∞–≤–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω–æ–π.\n\n–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: /rln 36 100")
		case "rlc":
			return c.Send("–í –∏–≥—Ä–µ '–†—É–ª–µ—Ç–∫–∞ –ø–æ —Ü–≤–µ—Ç—É' –∏–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç —Ü–≤–µ—Ç (—á–µ—Ä–Ω—ã–π, –∫—Ä–∞—Å–Ω—ã–π –∏–ª–∏ –∑–µ–ª–µ–Ω—ã–π) –∏ —Å—Ç–∞–≤–∫—É –≤ " +
				"–∑–µ—Ç–∫–∞—Ö.\n\n\t‚Ä¢\t–ï—Å–ª–∏ –≤—ã–ø–∞–≤—à–∏–π —Ü–≤–µ—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º, –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç x2 —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏" +
				"\n\t‚Ä¢\t–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, —Å—Ç–∞–≤–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω–æ–π.\n\n–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: /rlc —á 100")
		case "dice":
			return c.Send("–í –∏–≥—Ä–µ '–ö–æ—Å—Ç–∏' –∏–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é —Å—É–º–º—É –¥–≤—É—Ö –∫—É–±–∏–∫–æ–≤ " +
				"(–æ—Ç 2 –¥–æ 12).\n\n\t‚Ä¢\t–ï—Å–ª–∏ —Å—É–º–º–∞ —á–∏—Å–µ–ª –Ω–∞ –∫—É–±–∏–∫–∞—Ö —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–π, –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç " +
				"–∏ –ø–æ–ª—É—á–∞–µ—Ç x12 —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏ \n\t‚Ä¢\t–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, —Å—Ç–∞–≤–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω–æ–π.\n\n–ü—Ä–∏–º–µ—Ä " +
				"–∫–æ–º–∞–Ω–¥—ã: /dice 12 100")
		case "rsp":
			return c.Send("–í –∏–≥—Ä–µ '–ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞' –∏–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞–º–µ–Ω—å/–Ω–æ–∂–Ω–∏—Ü—ã/–±—É–º–∞–≥—É –∏ —Å—Ç–∞–≤–∫—É –≤ " +
				"–∑–µ—Ç–∫–∞—Ö.\n\n\t‚Ä¢\t–ï—Å–ª–∏ –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç x3 —Å—É–º–º—ã " +
				"—Å—Ç–∞–≤–∫–∏\n\t‚Ä¢\t–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, —Å—Ç–∞–≤–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω–æ–π.\n\n–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: /rsp –∫ 100")
		default:
			return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
		}
	}
	return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
}

func (e *Endpoint) SlotsHandler(c telebot.Context) error {
	var amount int64
	args := c.Args()

	if len(args) == 1 { // /slots <amount>
		var err error
		amount, err = strconv.ParseInt(args[0], 10, 64)
		if err != nil {
			return err
		}
	} else {
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /slots <—Å—É–º–º–∞>.")
	}

	if amount < 0 {
		return c.Send("–û—à–∏–±–∫–∞: " + constants.ErrNegativeAmount)
	} else if amount < 10 {
		return c.Send("–û—à–∏–±–∫–∞: " + constants.ErrLessAmount)
	}

	win, autoloss, result, newAmount, balance, err := e.Play.Slots(c.Sender().ID, amount)
	if err != nil {
		if err.Error() == constants.ErrLackBalance {
			return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %s. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %d –∑–µ—Ç–æ–∫.", err.Error(), balance))
		}
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %s.", err.Error()))
	}

	resultMsg := fmt.Sprintf("üé∞ –ò–≥—Ä–∞–µ–º –Ω–∞ %d –∑–µ—Ç–æ–∫\n\n%s | %s | %s\n\n", amount, result[0], result[1], result[2])
	if win {
		resultMsg += fmt.Sprintf("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª: %d –∑–µ—Ç–æ–∫\n", newAmount)
	} else {
		resultMsg += "üö´ –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.\n"
	}
	resultMsg += fmt.Sprintf("–í–∞—à –±–∞–ª–∞–Ω—Å: %d", balance)

	logger.Infof(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s (%d) –∏–≥—Ä–∞–µ—Ç –≤ —Å–ª–æ—Ç—ã", c.Sender().Username, c.Sender().ID),
		c.Chat().ID, c.Chat().Title, zap.Bool("win", win), zap.Bool("autoloss", autoloss), zap.Any("result", result),
		zap.Int64("amount", amount), zap.Int64("balance", balance))
	return c.Send(resultMsg)
}

func (e *Endpoint) StealHandler(c telebot.Context) error {
	var username string
	var amount int64
	var err error
	args := c.Args()

	if len(args) == 2 { // /steal <username> <—Å—É–º–º–∞>
		username = args[0]
		amount, err = strconv.ParseInt(args[1], 10, 64)
		if err != nil {
			return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: /steal username 100")
		}
	} else if len(args) == 1 && c.Message().ReplyTo != nil { // /steal <—Å—É–º–º–∞>
		username = c.Message().ReplyTo.Sender.Username
		amount, err = strconv.ParseInt(args[0], 10, 64)
		if err != nil {
			return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: /steal username 100")
		}
	} else {
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /steal username —Å—É–º–º–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /steal —Å—É–º–º–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
	}

	if amount < 0 {
		return c.Send("–û—à–∏–±–∫–∞: " + constants.ErrNegativeAmount)
	} else if amount < 10 {
		return c.Send("–û—à–∏–±–∫–∞: " + constants.ErrLessAmount)
	}

	win, balance, err := e.Play.Steal(username, c.Sender().Username, int(amount))
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %s.", err.Error()))
	}

	resultMsg := fmt.Sprintf("üé∞ –ü–æ–ø—ã—Ç–∫–∞ —É–∫—Ä–∞—Å—Ç—å %d –∑–µ—Ç–æ–∫ —É @%s: ", amount, strings.Trim(username, "@"))
	if win {
		resultMsg += fmt.Sprintf("‚úÖ –£—Å–ø–µ—à–Ω–æ! \n\n –í–∞—à –±–∞–ª–∞–Ω—Å: %d –∑–µ—Ç–æ–∫\n", balance)
	} else {
		resultMsg += fmt.Sprintf("üö´ –ù–µ—É–¥–∞—á–∞( \n\n –í–∞—à –±–∞–ª–∞–Ω—Å: %d –∑–µ—Ç–æ–∫\n", balance)
	}

	logger.Infof(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s (%d) –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–∫—Ä–∞—Å—Ç—å –¥–µ–Ω—å–≥–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @%s", c.Sender().Username, c.Sender().ID, strings.Trim(username, "@")),
		c.Chat().ID, c.Chat().Title, zap.Bool("win", win), zap.Int64("amount", amount), zap.Int64("balance", balance))
	return c.Send(resultMsg)
}

func (e *Endpoint) RouletteNumHandler(c telebot.Context) error {
	var amount, num int64
	args := c.Args()

	if len(args) == 2 {
		var err error
		num, err = strconv.ParseInt(args[0], 10, 64)
		if err != nil {
			return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rln 36 100.")
		}
		amount, err = strconv.ParseInt(args[1], 10, 64)
		if err != nil {
			return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rln 36 100.")
		}
	} else {
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rln <—á–∏—Å–ª–æ> <—Å—É–º–º–∞>.")
	}

	if num < 1 || num > 36 {
		return c.Send("–û—à–∏–±–∫–∞: " + constants.ErrNegativeRln)
	}

	if amount < 0 {
		return c.Send("–û—à–∏–±–∫–∞: " + constants.ErrNegativeAmount)
	} else if amount < 10 {
		return c.Send("–û—à–∏–±–∫–∞: " + constants.ErrLessAmount)
	}

	win, autoloss, result, newAmount, balance, err := e.Play.RouletteNum(c.Sender().ID, num, amount)
	if err != nil {
		if err.Error() == constants.ErrLackBalance {
			return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %s. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %d –∑–µ—Ç–æ–∫.", err.Error(), balance))
		}
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %s.", err.Error()))
	}

	resultMsg := fmt.Sprintf("üé∞ –ò–≥—Ä–∞–µ–º –Ω–∞ %d –∑–µ—Ç–æ–∫\n\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ: %d\n\n", amount, result)
	if win {
		resultMsg += fmt.Sprintf("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª: %d –∑–µ—Ç–æ–∫\n", newAmount)
	} else {
		resultMsg += "üö´ –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.\n"
	}
	resultMsg += fmt.Sprintf("–í–∞—à –±–∞–ª–∞–Ω—Å: %d", balance)

	logger.Infof(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s (%d) –∏–≥—Ä–∞–µ—Ç –≤ —Ä—É–ª–µ—Ç–∫—É –ø–æ —á–∏—Å–ª—É", c.Sender().Username, c.Sender().ID),
		c.Chat().ID, c.Chat().Title, zap.Bool("win", win), zap.Bool("autoloss", autoloss), zap.Any("result", result),
		zap.Int64("amount", amount), zap.Int64("balance", balance))
	return c.Send(resultMsg)
}

func (e *Endpoint) RouletteColorHandler(c telebot.Context) error {
	var amount, color int64
	var colorStr string
	args := c.Args()

	if len(args) == 2 {
		colorStr = args[0]

		var err error
		amount, err = strconv.ParseInt(args[1], 10, 64)
		if err != nil {
			return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rlc —á 100")
		}
	} else {
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rlc —Ü–≤–µ—Ç(—á/–∫/–∑) —Å—É–º–º–∞.")
	}

	if amount < 0 {
		return c.Send("–û—à–∏–±–∫–∞: " + constants.ErrNegativeAmount)
	} else if amount < 10 {
		return c.Send("–û—à–∏–±–∫–∞: " + constants.ErrLessAmount)
	}

	switch colorStr {
	case "—á", "—á–µ—Ä–Ω—ã–π", "—á–µ—Ä–Ω–æ–µ", "—á—ë—Ä–Ω–æ–µ", "—á—ë—Ä–Ω—ã–π", "black":
		color = 1
	case "–∫", "–∫—Ä", "–∫—Ä–∞—Å–Ω–æ–µ", "–∫—Ä–∞—Å–Ω—ã–π", "red":
		color = 2
	case "–∑", "–∑–µ–ª–µ–Ω–æ–µ", "–∑–µ–ª—ë–Ω–æ–µ", "–∑–µ–ª", "green":
		color = 3
	default:
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rlc —Ü–≤–µ—Ç(—á/–∫/–∑) —Å—É–º–º–∞.")
	}

	win, autoloss, result, newAmount, balance, err := e.Play.RouletteColor(c.Sender().ID, color, amount)
	if err != nil {
		if err.Error() == constants.ErrLackBalance {
			return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %s. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %d –∑–µ—Ç–æ–∫.", err.Error(), balance))
		}
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %s.", err.Error()))
	}

	resultMsg := fmt.Sprintf("üé∞ –ò–≥—Ä–∞–µ–º –Ω–∞ %d –∑–µ—Ç–æ–∫\n\n–í—ã–ø–∞–≤—à–∏–π —Ü–≤–µ—Ç: %s\n\n", amount, result)
	if win {
		resultMsg += fmt.Sprintf("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª: %d –∑–µ—Ç–æ–∫\n", newAmount)
	} else {
		resultMsg += "üö´ –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.\n"
	}
	resultMsg += fmt.Sprintf("–í–∞—à –±–∞–ª–∞–Ω—Å: %d", balance)

	logger.Infof(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s (%d) –∏–≥—Ä–∞–µ—Ç –≤ —Ä—É–ª–µ—Ç–∫—É –ø–æ —Ü–≤–µ—Ç—É", c.Sender().Username, c.Sender().ID),
		c.Chat().ID, c.Chat().Title, zap.Bool("win", win), zap.Bool("autoloss", autoloss), zap.Any("result", result),
		zap.Int64("amount", amount), zap.Int64("balance", balance))
	return c.Send(resultMsg)
}

func (e *Endpoint) DiceHandler(c telebot.Context) error {
	var amount, num int64
	args := c.Args()

	if len(args) == 2 {
		var err error
		num, err = strconv.ParseInt(args[0], 10, 64)
		if err != nil {
			return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /dice 11 100.")
		}
		amount, err = strconv.ParseInt(args[1], 10, 64)
		if err != nil {
			return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /dice 11 100.")
		}
	} else {
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /dice <—á–∏—Å–ª–æ> <—Å—É–º–º–∞>.")
	}

	if num < 2 || num > 12 {
		return c.Send("–û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 2 –¥–æ 12.")
	}

	if amount < 0 {
		return c.Send("–û—à–∏–±–∫–∞: " + constants.ErrNegativeAmount)
	} else if amount < 10 {
		return c.Send("–û—à–∏–±–∫–∞: " + constants.ErrLessAmount)
	}

	win, autoloss, result, newAmount, balance, err := e.Play.Dice(c.Sender().ID, num, amount)
	if err != nil {
		if err.Error() == constants.ErrLackBalance {
			return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %s. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %d –∑–µ—Ç–æ–∫.", err.Error(), balance))
		}
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %s.", err.Error()))
	}

	resultMsg := fmt.Sprintf("üé∞ –ò–≥—Ä–∞–µ–º –Ω–∞ %d –∑–µ—Ç–æ–∫\n\n–ù–∞ üé≤‚Ññ1 –≤—ã–ø–∞–ª–æ: %d\n–ù–∞ üé≤‚Ññ2 –≤—ã–ø–∞–ª–æ: %d\n\n", amount, result[0], result[1])
	if win {
		resultMsg += fmt.Sprintf("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª: %d –∑–µ—Ç–æ–∫\n", newAmount)
	} else {
		resultMsg += "üö´ –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.\n"
	}
	resultMsg += fmt.Sprintf("–í–∞—à –±–∞–ª–∞–Ω—Å: %d", balance)

	logger.Infof(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s (%d) –∏–≥—Ä–∞–µ—Ç –≤ –∫–æ—Å—Ç–∏", c.Sender().Username, c.Sender().ID),
		c.Chat().ID, c.Chat().Title, zap.Bool("win", win), zap.Bool("autoloss", autoloss), zap.Any("result", result),
		zap.Int64("amount", amount), zap.Int64("balance", balance))
	return c.Send(resultMsg)
}

func (e *Endpoint) RockPaperScissorsHandler(c telebot.Context) error {
	var amount, choice int64
	var choiceStr string
	args := c.Args()

	if len(args) == 2 {
		choiceStr = args[0]

		var err error
		amount, err = strconv.ParseInt(args[1], 10, 64)
		if err != nil {
			return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rlc —á 100")
		}
	} else {
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rlc —Ü–≤–µ—Ç(—á/–∫/–∑) —Å—É–º–º–∞.")
	}

	if amount < 0 {
		return c.Send("–û—à–∏–±–∫–∞: " + constants.ErrNegativeAmount)
	} else if amount < 10 {
		return c.Send("–û—à–∏–±–∫–∞: " + constants.ErrLessAmount)
	}

	switch choiceStr {
	case "–∫", "–∫–∞–º–µ–Ω—å", "rock":
		choice = 1
	case "–Ω", "–Ω–æ–∂–Ω–∏—Ü—ã", "scissors":
		choice = 2
	case "–±", "–±—É–º–∞–≥–∞", "paper":
		choice = 3
	default:
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rsp –∫/–Ω/–± —Å—É–º–º–∞.")
	}

	win, autoloss, result, newAmount, balance, err := e.Play.RockPaperScissors(c.Sender().ID, choice, amount)
	if err != nil {
		if err.Error() == constants.ErrLackBalance {
			return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %s. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %d –∑–µ—Ç–æ–∫.", err.Error(), balance))
		}
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %s.", err.Error()))
	}

	resultMsg := fmt.Sprintf("üé∞ –ò–≥—Ä–∞–µ–º –Ω–∞ %d –∑–µ—Ç–æ–∫\n\n–í—ã–±–æ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: %s\n\n", amount, result)
	if win {
		resultMsg += fmt.Sprintf("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª: %d –∑–µ—Ç–æ–∫\n", newAmount)
	} else {
		resultMsg += "üö´ –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.\n"
	}
	resultMsg += fmt.Sprintf("–í–∞—à –±–∞–ª–∞–Ω—Å: %d", balance)

	logger.Infof(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s (%d) –∏–≥—Ä–∞–µ—Ç –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞", c.Sender().Username, c.Sender().ID),
		c.Chat().ID, c.Chat().Title, zap.Bool("win", win), zap.Bool("autoloss", autoloss), zap.Any("result", result),
		zap.Int64("amount", amount), zap.Int64("balance", balance))
	return c.Send(resultMsg)
}

func (e *Endpoint) SelfMuteHandler(c telebot.Context) error {
	var duration string
	args := c.Args()

	if len(args) == 1 { // /selfmute <–≤—Ä–µ–º—è>
		duration = args[0]
	} else {
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /selfmute <–≤—Ä–µ–º—è>.")
	}

	if duration == "0s" {
		return c.Send("–û—à–∏–±–∫–∞: –¥–ª–∏–Ω–∞ –º—É—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1s.")
	}

	balance, amount, err := e.Play.SelfMute(c.Sender().ID, duration)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %s.", err.Error()))
	}

	logger.Infof(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s (%d) —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∑–∞–º—É—Ç–∏–ª —Å–µ–±—è", c.Sender().Username, c.Sender().ID),
		c.Chat().ID, c.Chat().Title, zap.String("duration", duration), zap.Int64("amount", amount), zap.Int64("balance", balance))
	return c.Send(fmt.Sprintf("–í—ã –∑–∞–º—É—Ç–∏–ª–∏ —Å–µ–±—è –Ω–∞ %s. –ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç–µ %d –∑–µ—Ç–æ–∫. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %d –∑–µ—Ç–æ–∫", duration, amount, balance))
}

func (e *Endpoint) SelfUnmuteHandler(c telebot.Context) error {
	balance, amount, err := e.Play.SelfUnmute(c.Sender().ID)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %s.", err.Error()))
	}

	logger.Infof(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s (%d) –¥–æ—Å—Ä–æ—á–Ω–æ —Ä–∞–∑–º—É—Ç–∏–ª —Å–µ–±—è", c.Sender().Username, c.Sender().ID),
		c.Chat().ID, c.Chat().Title, zap.Int64("amount", amount), zap.Int64("balance", balance))
	return c.Send(fmt.Sprintf("–í—ã –¥–æ—Å—Ä–æ—á–Ω–æ —Ä–∞–∑–º—É—Ç–∏–ª–∏ —Å–µ–±—è –∏ –ø–æ—Ç–µ—Ä—è–ª–∏ –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤ —Ö–æ–¥–µ –º—É—Ç–∞ –∑–µ—Ç–∫–∏ (%d). –í–∞—à –±–∞–ª–∞–Ω—Å: %d –∑–µ—Ç–æ–∫", amount, balance))
}
