package payments

import (
	"fmt"
	"go.uber.org/zap"
	"gopkg.in/telebot.v3"
	"hamsterbot/pkg/logger"
	"strconv"
	"strings"
)

type Payment interface {
	Pay(from string, to string, amount int) (int64, error)
	PayAdm(to string, amount int) (int64, error)
}

type User interface {
	GetUserById(id int64) (map[string]interface{}, error)
	GetUserByUsername(username string) (map[string]interface{}, error)
	GetBankBalance() (map[string]interface{}, error)
}

type Endpoint struct {
	Payment Payment
	User    User
}

func (e *Endpoint) PayHandler(c telebot.Context) error {
	var username string
	var amount int

	args := c.Args()

	// /pay <username> <—Å—É–º–º–∞>
	if len(args) == 2 {
		username = args[0]
		amountStr := args[1]

		var err error
		amount, err = strconv.Atoi(amountStr)
		if err != nil {
			return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: /pay username 100")
		}
		// /pay <—Å—É–º–º–∞>
	} else if len(args) == 1 && c.Message().ReplyTo != nil {
		username = c.Message().ReplyTo.Sender.Username

		amountStr := args[0]

		var err error
		amount, err = strconv.Atoi(amountStr)
		if err != nil {
			return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: /pay username 100")
		}
	} else {
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /pay username —Å—É–º–º–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /pay —Å—É–º–º–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
	}

	if c.Sender().Username == strings.Trim(username, "@") {
		return c.Send("–û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
	}

	if amount < 0 {
		return c.Send("–û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
	}

	balance, err := e.Payment.Pay(c.Sender().Username, username, amount)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %s. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %d –∑–µ—Ç–æ–∫", err.Error(), balance))
	}

	logger.Infof(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s (%d) –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @%s", c.Sender().Username, c.Sender().ID, strings.Trim(username, "@")),
		c.Chat().ID, c.Chat().Title, zap.Int("amount", amount), zap.Int64("balance", balance))
	return c.Send(fmt.Sprintf("–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @%s –Ω–∞ —Å—É–º–º—É %d –∑–µ—Ç–æ–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %d –∑–µ—Ç–æ–∫", strings.Trim(username, "@"), amount, balance))
}

func (e *Endpoint) PayAdmHandler(c telebot.Context) error {
	if c.Sender().ID != 1230045591 {
		return nil
	}
	logger.Debug("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ PayAdm")
	var username string
	var amount int

	args := c.Args()

	// /pay <username> <—Å—É–º–º–∞>
	if len(args) == 2 {
		username = args[0]
		amountStr := args[1]

		var err error
		amount, err = strconv.Atoi(amountStr)
		if err != nil {
			return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: /pay username 100")
		}
		// /pay <—Å—É–º–º–∞>
	} else if len(args) == 1 && c.Message().ReplyTo != nil {
		username = c.Message().ReplyTo.Sender.Username

		amountStr := args[0]

		var err error
		amount, err = strconv.Atoi(amountStr)
		if err != nil {
			return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: /pay username 100")
		}
	} else {
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /pay username —Å—É–º–º–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /pay —Å—É–º–º–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
	}

	balance, err := e.Payment.PayAdm(username, amount)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %s. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %d –∑–µ—Ç–æ–∫", err.Error(), balance))
	}

	return c.Send(fmt.Sprintf("–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @%s –Ω–∞ —Å—É–º–º—É %d –∑–µ—Ç–æ–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", strings.Trim(username, "@"), amount))
}

func (e *Endpoint) BankHandler(c telebot.Context) error {
	args := c.Args()

	switch len(args) {
	case 0:
		err := e.GetBankData(c)
		if err != nil {
			return err
		}
	case 1:
		if args[0] == "info" {
			bank, err := e.User.GetUserByUsername(fmt.Sprintf("bank_%d_%s", c.Sender().ID, c.Sender().Username))
			if err != nil {
				return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
			}

			return c.Send(fmt.Sprintf("üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—á–Ω–æ–º —Å—á—ë—Ç–µ @%s –≤ –±–∞–Ω–∫–µ:\n\nüëâ –ë–∞–ª–∞–Ω—Å: %d –∑–µ—Ç–æ–∫\n", c.Sender().Username, bank["balance"].(int64)) + "üëâ –°—Ç–∞–≤–∫–∞: 3% –¥–Ω–µ–≤–Ω—ã—Ö")
		}
	case 2: // /bank pay <—Å—É–º–º–∞>
		if args[0] == "pay" {
			amount, err := strconv.Atoi(args[1])
			if err != nil {
				return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: /bank pay 100")
			}

			var userBalance, bankBalance int64
			user, err := e.User.GetUserById(c.Sender().ID)
			if err != nil {
				return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
			}
			bank, err := e.User.GetUserByUsername(fmt.Sprintf("bank_%d_%s", c.Sender().ID, c.Sender().Username))
			if err != nil {
				return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
			}
			userBalance = user["balance"].(int64)
			bankBalance = bank["balance"].(int64)

			if amount > 0 {
				userBalance, err = e.Payment.Pay(c.Sender().Username, fmt.Sprintf("bank_%d_%s", c.Sender().ID, c.Sender().Username), -amount)
				if err != nil {
					return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %s. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %d –∑–µ—Ç–æ–∫", err.Error(), userBalance))
				}
				bankBalance -= int64(amount)
			} else if amount < 0 {
				bankBalance, err = e.Payment.Pay(fmt.Sprintf("bank_%d_%s", c.Sender().ID, c.Sender().Username), c.Sender().Username, amount)
				if err != nil {
					return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %s. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %d –∑–µ—Ç–æ–∫", err.Error(), userBalance))
				}
				userBalance -= int64(amount)
			} else {
				return c.Send("–û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º.")
			}

			logger.Infof(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s (%d) –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–µ–Ω—å–≥–∏ –≤ –ª–∏—á–Ω—ã–π –±–∞–Ω–∫", c.Sender().Username, c.Sender().ID),
				c.Chat().ID, c.Chat().Title, zap.Int("amount", amount), zap.Int64("userBalance", userBalance), zap.Int64("bankBalance", bankBalance))
			return c.Send(fmt.Sprintf("–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –ª–∏—á–Ω—ã–π —Å—á–µ—Ç –≤ –±–∞–Ω–∫–µ –Ω–∞ —Å—É–º–º—É %d –∑–µ—Ç–æ–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %d –∑–µ—Ç–æ–∫. –ë–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –≤ –±–∞–Ω–∫–µ: %d –∑–µ—Ç–æ–∫", amount, userBalance, bankBalance))

		}
	default:
		return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–ª—è –ø–æ–º–æ—â–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /help")
	}

	return nil
}

func (e *Endpoint) GetBankData(c telebot.Context) error {
	data, err := e.User.GetBankBalance()
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
	}

	return c.Send(fmt.Sprintf("üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–Ω–∫–µ:\n\nüëâ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: %d –∑–µ—Ç–æ–∫\n–ò–∑ –Ω–∏—Ö —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ —Å—á–µ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d –∑–µ—Ç–æ–∫", data["bank"].(int64)+data["users"].(int64), data["users"].(int64)))
}
